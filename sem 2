#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define GRID_SIZE 2

typedef enum { CLEAN, DIRTY } RoomState;

typedef struct {
    RoomState **grid;
    int x, y;
} VacuumCleaner;

void display_grid(VacuumCleaner *vacuum) {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            printf("%s | ", (vacuum->grid[i][j] == CLEAN)? "Clean" : "Dirty");
        }
        printf("\n");
    }
    printf("Vacuum Position: (%d, %d)\n\n", vacuum->x, vacuum->y);
}
int is_clean(VacuumCleaner *vacuum) {
    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            if (vacuum->grid[i][j] == DIRTY) {
                return 0;
            }
        }
    }
    return 1;
}

void move(VacuumCleaner *vacuum, char direction) {
    switch (direction) {
        case 'L':
            if (vacuum->y > 0) {
                vacuum->y--;
            }
            break;
        case 'R':
            if (vacuum->y < GRID_SIZE - 1) {
                vacuum->y++;
            }
            break;
        case 'U':
            if (vacuum->x > 0) {
                vacuum->x--;
            }
            break;
        case 'D':
            if (vacuum->x < GRID_SIZE - 1) {
                vacuum->x++;
            }
            break;
    }
}

void suck(VacuumCleaner *vacuum) {
    if (vacuum->grid[vacuum->x][vacuum->y] == DIRTY) {
        vacuum->grid[vacuum->x][vacuum->y] = CLEAN;
    }
}

void step(VacuumCleaner *vacuum) {
    if (is_clean(vacuum)) {
        printf("All rooms are clean!\n");
        return;
    }
    suck(vacuum);
    display_grid(vacuum);
    char directions[] = {'L', 'R', 'U', 'D'};
    char direction = directions[rand() % 4];
    move(vacuum, direction);
}

int main() {
    srand(time(NULL)); // Seed random number generator

    VacuumCleaner vacuum;
    vacuum.grid = (RoomState **)malloc(GRID_SIZE * sizeof(RoomState *));
    for (int i = 0; i < GRID_SIZE; i++) {
        vacuum.grid[i] = (RoomState *)malloc(GRID_SIZE * sizeof(RoomState));
    }

    for (int i = 0; i < GRID_SIZE; i++) {
        for (int j = 0; j < GRID_SIZE; j++) {
            vacuum.grid[i][j] = (rand() % 2 == 0)? CLEAN : DIRTY;
        }
    }

    vacuum.x = 0;
    vacuum.y = 0;

    display_grid(&vacuum);

    for (int i = 0; i < 20; i++) {
        step(&vacuum);
        if (is_clean(&vacuum)) {
            break;
        }
    }

    for (int i = 0; i < GRID_SIZE; i++) {
        free(vacuum.grid[i]);
    }
    free(vacuum.grid);

    return 0;
}
